<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: jboss-service.xml,v 1.1 2006/11/01 18:14:22 nrichards Exp $ -->

<!-- ===================================================================== -->
<!--                                                                       -->
<!--  JBoss Server Configuration                                           -->
<!--                                                                       -->
<!-- ===================================================================== -->

<server>

  <!-- Load all jars from the JBOSS_DIST/server/<config>/lib directory. This
    can be restricted to specific jars by specifying them in the archives
    attribute.
   -->
  <classpath codebase="lib" archives="*"/>

  <!-- ==================================================================== -->
  <!-- Log4j Initialization                                                 -->
  <!-- ==================================================================== -->

  <mbean code="org.jboss.logging.Log4jService"
	 name="jboss.system:type=Log4jService,service=Logging">
    <attribute name="ConfigurationURL">resource:log4j.xml</attribute>
  </mbean>

  <!-- ==================================================================== -->
  <!-- JBoss RMI Classloader - only install when available                  -->
  <!-- ==================================================================== -->
  <mbean code="org.jboss.util.property.jmx.SystemPropertyClassValue"
    name="jboss.rmi:type=RMIClassLoader">
    <attribute name="Property">java.rmi.server.RMIClassLoaderSpi</attribute>
    <attribute name="ClassName">org.jboss.system.JBossRMIClassLoader</attribute>
  </mbean>


  <!-- ==================================================================== -->
  <!-- Class Loading                                                        -->
  <!-- ==================================================================== -->

  <mbean code="org.jboss.web.WebService"
	 name="jboss:service=WebService">
      <attribute name="Port">8083</attribute>
      <!-- Should resources and non-EJB classes be downloadable -->
      <attribute name="DownloadServerClasses">true</attribute>
      <attribute name="Host">${jboss.bind.address}</attribute>
      <attribute name="BindAddress">${jboss.bind.address}</attribute>
  </mbean>


  <!-- ==================================================================== -->
  <!-- JNDI                                                                 -->
  <!-- ==================================================================== -->

   <mbean code="org.jboss.naming.NamingService"
      name="jboss:service=Naming">
      <!-- The listening port for the bootstrap JNP service. Set this to -1
        to run the NamingService without the JNP invoker listening port.
      -->
      <attribute name="Port">1099</attribute>
      <!-- The bootstrap JNP server bind address. This also sets the default
      RMI service bind address. Empty == all addresses
       -->
      <attribute name="BindAddress">${jboss.bind.address}</attribute>
      <!-- The port of the RMI naming service, 0 == anonymous -->
      <attribute name="RmiPort">1098</attribute>
      <!-- The RMI service bind address. Empty == all addresses
       -->
      <attribute name="RmiBindAddress">${jboss.bind.address}</attribute>
   </mbean>

   <mbean code="org.jboss.naming.JNDIView" name="jboss:service=JNDIView">
   </mbean>

   <!-- ==================================================================== -->
   <!-- Security                                                             -->
   <!-- ==================================================================== -->

   <mbean code="org.jboss.security.plugins.SecurityConfig"
      name="jboss.security:name=SecurityConfig">
      <attribute name="LoginConfig">jboss.security:service=XMLLoginConfig</attribute>
   </mbean>
   <mbean code="org.jboss.security.auth.login.XMLLoginConfig"
      name="jboss.security:service=XMLLoginConfig">
      <attribute name="ConfigResource">login-config.xml</attribute>
   </mbean>

   <!-- JAAS security manager and realm mapping -->
   <mbean code="org.jboss.security.plugins.JaasSecurityManagerService"
      name="jboss.security:service=JaasSecurityManager">
      <attribute name="SecurityManagerClassName">
         org.jboss.security.plugins.JaasSecurityManager
      </attribute>
   </mbean>

   <!-- The SSL domain setup -->
   <mbean code="org.jboss.security.plugins.JaasSecurityDomain"
      name="Security:name=JaasSecurityDomain,domain=RMI+SSL">
      <constructor>
         <arg type="java.lang.String" value="RMI+SSL"/>
      </constructor>
      <attribute name="KeyStoreURL">example.keystore</attribute>
      <attribute name="KeyStorePass">rmi+ssl</attribute>
   </mbean>

   <!-- ==================================================================== -->
   <!-- Transactions                                                         -->
   <!-- ==================================================================== -->
   <!-- The configurable Xid factory.  For use with Oracle, set pad to true -->
   <mbean code="org.jboss.tm.XidFactory"
      name="jboss:service=XidFactory">
      <!--attribute name="Pad">true</attribute-->
   </mbean>

   <!--
      | The fast in-memory transaction manager.
    -->
   <mbean code="org.jboss.tm.TransactionManagerService"
      name="jboss:service=TransactionManager">
      <attribute name="TransactionTimeout">300</attribute>

      <depends optional-attribute-name="XidFactory">jboss:service=XidFactory</depends>
   </mbean>

   <!--
      | UserTransaction support.
    -->
   <mbean code="org.jboss.tm.usertx.server.ClientUserTransactionService"
      name="jboss:service=ClientUserTransaction">
      <depends>
         <mbean code="org.jboss.invocation.jrmp.server.JRMPProxyFactory"
            name="jboss:service=proxyFactory,target=ClientUserTransactionFactory">
            <attribute name="InvokerName">jboss:service=invoker,type=jrmp</attribute>
            <attribute name="TargetName">jboss:service=ClientUserTransaction</attribute>
            <attribute name="JndiName">UserTransactionSessionFactory</attribute>
            <attribute name="ExportedInterface">org.jboss.tm.usertx.interfaces.UserTransactionSessionFactory</attribute>
            <attribute name="ClientInterceptors">
               <interceptors>
                  <interceptor>org.jboss.proxy.ClientMethodInterceptor</interceptor>
                  <interceptor>org.jboss.invocation.InvokerInterceptor</interceptor>
               </interceptors>
            </attribute>
            <depends>jboss:service=invoker,type=jrmp</depends>
         </mbean>
      </depends>
      <depends optional-attribute-name="TxProxyName">
         <mbean code="org.jboss.invocation.jrmp.server.JRMPProxyFactory"
            name="jboss:service=proxyFactory,target=ClientUserTransaction">
            <attribute name="InvokerName">jboss:service=invoker,type=jrmp</attribute>
            <attribute name="TargetName">jboss:service=ClientUserTransaction</attribute>
            <attribute name="JndiName"></attribute>
            <attribute name="ExportedInterface">org.jboss.tm.usertx.interfaces.UserTransactionSession</attribute>
            <attribute name="ClientInterceptors">
               <interceptors>
                  <interceptor>org.jboss.proxy.ClientMethodInterceptor</interceptor>
                  <interceptor>org.jboss.invocation.InvokerInterceptor</interceptor>
               </interceptors>
            </attribute>
            <depends>jboss:service=invoker,type=jrmp</depends>
         </mbean>
      </depends>

   </mbean>

   <!-- ==================================================================== -->
   <!-- Invokers to the JMX node                                             -->
   <!-- ==================================================================== -->

   <!-- RMI/JRMP invoker -->
   <mbean code="org.jboss.invocation.jrmp.server.JRMPInvoker"
      name="jboss:service=invoker,type=jrmp">
      <attribute name="RMIObjectPort">4444</attribute>
      <attribute name="ServerAddress">${jboss.bind.address}</attribute>
      <!--
      <attribute name="RMIClientSocketFactory">custom</attribute>
      <attribute name="RMIServerSocketFactory">custom</attribute>
      <attribute name="SecurityDomain">ssl-domain-name</attribute>
      -->
      <depends>jboss:service=TransactionManager</depends>
   </mbean>

   <mbean code="org.jboss.invocation.local.LocalInvoker"
      name="jboss:service=invoker,type=local">

      <depends>jboss:service=TransactionManager</depends>
   </mbean>

   <!-- ==================================================================== -->
   <!-- The deployers...                                                     -->
   <!-- ==================================================================== -->

   <!-- EJB deployer, remove to disable EJB behavior-->
   <mbean code="org.jboss.ejb.EJBDeployer" name="jboss.ejb:service=EJBDeployer">
      <attribute name="VerifyDeployments">true</attribute>
      <attribute name="ValidateDTDs">false</attribute>
      <attribute name="MetricsEnabled">false</attribute>
      <attribute name="VerifierVerbose">true</attribute>

      <!--
          StrictVerifier: Setting this to 'true' will cause all deployments
          to fail when the Verifier detected a problem with the contained
          Beans.
      -->
      <attribute name="StrictVerifier">true</attribute>

      <depends optional-attribute-name="TransactionManagerServiceName">jboss:service=TransactionManager</depends>
      <depends optional-attribute-name="WebServiceName">jboss:service=WebService</depends>
   </mbean>

   <!-- EAR deployer, remove if you are not using Web layers -->
   <mbean code="org.jboss.deployment.EARDeployer" name="jboss.j2ee:service=EARDeployer">
   </mbean>

   <mbean code="org.jboss.varia.deployment.BeanShellSubDeployer"
      name="jboss.scripts:service=BSHDeployer">
   </mbean>

   <!-- ==================================================================== -->
   <!-- Monitoring and Management                                            -->
   <!-- ==================================================================== -->

   <!-- Uncomment to enable JMX monitoring of the bean cache
   <mbean code="org.jboss.monitor.BeanCacheMonitor"
          name="jboss.monitor:name=BeanCacheMonitor"/>
   -->

   <!-- Uncomment to enable JMX monitoring of the entity bean locking
   <mbean code="org.jboss.monitor.EntityLockMonitor"
          name="jboss.monitor:name=EntityLockMonitor"/>
   -->

   <!-- ==================================================================== -->
   <!-- Deployment Scanning                                                  -->
   <!-- ==================================================================== -->

   <!-- An mbean for hot deployment/undeployment of archives.
   -->
   <mbean code="org.jboss.deployment.scanner.URLDeploymentScanner"
      name="jboss.deployment:type=DeploymentScanner,flavor=URL">

      <!-- Uncomment (and comment/remove version below) to enable usage of the
        DeploymentCache
      <depends optional-attribute-name="Deployer">jboss.deployment:type=DeploymentCache</depends>
      -->
      <depends optional-attribute-name="Deployer">jboss.system:service=MainDeployer</depends>

      <!-- The URLComparator can be used to specify a deployment ordering
           for deployments found in a scanned directory.  The class specified
           must be an implementation of java.util.Comparator, it must be able
           to compare two URL objects, and it must have a no-arg constructor.
           Two deployment comparators are shipped with JBoss:
             - org.jboss.deployment.DeploymentSorter
               Sorts by file extension, as follows:
                 "sar", "service.xml", "rar", "jar", "war", "wsr", "ear", "zip",
                 "*"
             - org.jboss.deployment.scanner.PrefixDeploymentSorter
               If the name portion of the url begins with 1 or more digits, those
               digits are converted to an int (ignoring leading zeroes), and
               files are deployed in that order.  Files that do not start with
               any digits will be deployed first, and they will be sorted by
               extension as above with DeploymentSorter.
      -->
      <attribute name="URLComparator">org.jboss.deployment.DeploymentSorter</attribute>
      <!--
      <attribute name="URLComparator">org.jboss.deployment.scanner.PrefixDeploymentSorter</attribute>
      -->

      <!-- The Filter specifies a java.io.FileFilter for scanned
           directories.  Any file not accepted by this filter will not be
           deployed.  The org.jboss.deployment.scanner.DeploymentFilter
           rejects the following patterns:
               "#*", "%*", ",*", ".*", "_$*", "*#", "*$", "*%", "*.BAK",
               "*.old", "*.orig", "*.rej", "*.bak", "*,v", "*~", ".make.state",
               ".nse_depinfo", "CVS", "CVS.admin", "RCS", "RCSLOG", "SCCS",
               "TAGS", "core", "tags"
      -->
      <attribute name="Filter">org.jboss.deployment.scanner.DeploymentFilter</attribute>

      <attribute name="ScanPeriod">5000</attribute>

      <!-- URLs are comma separated and resolve relative to the server home URL
         unless the given path is absolute. If the URL ends in "/" it is
         considered a collection and scanned, otherwise it is simply deployed;
         this follows RFC2518 convention and allows discrimination between
         collections and directories that are simply unpacked archives.

         URLs may be local (file:) or remote (http:). Scanning is supported
         for remote URLs but unpacked deployment units are not.

         Example URLs:
            deploy/
                 scans ${jboss.server.url}/deploy/, which is local or remote
                 depending on the URL used to boot the server
            ${jboss.server.home}/deploy/
                 scans ${jboss.server.home)/deploy, which is always local
            file:/var/opt/myapp.ear
                 deploy myapp.ear from a local location
            file:/var/opt/apps/
                 scans the specified directory
            http://www.test.com/netboot/myapp.ear
                 deploys myapp.ear from a remote location
            http://www.test.com/netboot/apps/
                 scans the specified WebDAV location
       -->
      <attribute name="URLs">
         deploy/
      </attribute>

      <!-- Indicates if the scanner should recursively scan directories that
      contain no "." in their names. This can be used to group applications
      and services that must be deployed and that have the same
      logical function in the same directory i.e.
        deploy/JMX/amples]$
        deploy/JMS/
        ...
      -->

      <attribute name="RecursiveSearch">True</attribute>

   </mbean>

</server>

 
